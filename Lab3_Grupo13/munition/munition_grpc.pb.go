// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: munition.proto

package munition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Earth_SolicitudeM_FullMethodName = "/munition.Earth/SolicitudeM"
)

// EarthClient is the client API for Earth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EarthClient interface {
	SolicitudeM(ctx context.Context, in *MunitionRequest, opts ...grpc.CallOption) (*MunitionResponse, error)
}

type earthClient struct {
	cc grpc.ClientConnInterface
}

func NewEarthClient(cc grpc.ClientConnInterface) EarthClient {
	return &earthClient{cc}
}

func (c *earthClient) SolicitudeM(ctx context.Context, in *MunitionRequest, opts ...grpc.CallOption) (*MunitionResponse, error) {
	out := new(MunitionResponse)
	err := c.cc.Invoke(ctx, Earth_SolicitudeM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EarthServer is the server API for Earth service.
// All implementations must embed UnimplementedEarthServer
// for forward compatibility
type EarthServer interface {
	SolicitudeM(context.Context, *MunitionRequest) (*MunitionResponse, error)
	mustEmbedUnimplementedEarthServer()
}

// UnimplementedEarthServer must be embedded to have forward compatible implementations.
type UnimplementedEarthServer struct {
}

func (UnimplementedEarthServer) SolicitudeM(context.Context, *MunitionRequest) (*MunitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitudeM not implemented")
}
func (UnimplementedEarthServer) mustEmbedUnimplementedEarthServer() {}

// UnsafeEarthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EarthServer will
// result in compilation errors.
type UnsafeEarthServer interface {
	mustEmbedUnimplementedEarthServer()
}

func RegisterEarthServer(s grpc.ServiceRegistrar, srv EarthServer) {
	s.RegisterService(&Earth_ServiceDesc, srv)
}

func _Earth_SolicitudeM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MunitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarthServer).SolicitudeM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Earth_SolicitudeM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarthServer).SolicitudeM(ctx, req.(*MunitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Earth_ServiceDesc is the grpc.ServiceDesc for Earth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Earth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "munition.Earth",
	HandlerType: (*EarthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitudeM",
			Handler:    _Earth_SolicitudeM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "munition.proto",
}
